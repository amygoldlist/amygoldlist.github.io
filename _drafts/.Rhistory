knitr::opts_chunk$set(echo = TRUE)
1-(1-2/57)^57
1-e^{-2}
1-exp(-2)
1-((2*240)/(225*224))^(224)
1-((2*(2*225-30))/(225*224))^(224)
15*15
1-(1-(2*(2*225-30))/(225*224))^(224)
exp(-4)
1-exp(-4)
knitr::opts_chunk$set(echo = TRUE)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
puz_1-puz_2
abs(puz_1-puz_2)
sum(difs ==1)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
n <- 58
puzzle <- sample(c(1:n),size=n,replace = FALSE )
## are there neighbours?
## shift each number a bit
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
count_neighbours <- function(n){
puzzle <- sample(c(1:n),size=n,replace = FALSE )
puz_1 <- c(puzzle,n+100)
puz_2 <- c(n+100, puzzle)
difs <- abs(puz_1-puz_2)
sum(difs ==1)
}
count_neighbours(58)
Repeat_experiment <- function(n,reps=1000){
no_neighbours <- c(1:reps)*0
for (i in 1:reps){
no_neighbours[i] <- count_neighbours(n)
}
}
Repeat_experiment(n=58)
Repeat_experiment <- function(n,reps=1000){
no_neighbours <- c(1:reps)*0
for (i in 1:reps){
no_neighbours[i] <- count_neighbours(n)
}
no_neighbours
}
##check
Repeat_experiment(58)
Repeat_experiment <- function(n,reps=1000){
no_neighbours <- c(1:reps)*0
for (i in 1:reps){
no_neighbours[i] <- count_neighbours(n)
}
sum(no_neighbours>0)/1000
}
##check
Repeat_experiment(58)
Repeat_experiment <- function(n,reps=1000){
no_neighbours <- c(1:reps)*0
for (i in 1:reps){
no_neighbours[i] <- count_neighbours(n)
}
prop <- sum(no_neighbours>0)/1000
m <- mean(no_neighours)
return(list("vector"=no_neighbours, "proportion" = prop, "mean"=m))
}
##check
Repeat_experiment(58)$proportion
Repeat_experiment <- function(n,reps=1000){
no_neighbours <- c(1:reps)*0
for (i in 1:reps){
no_neighbours[i] <- count_neighbours(n)
}
prop <- sum(no_neighbours==0)/1000
m <- mean(no_neighours)
return(list("vector"=no_neighbours, "proportion" = prop, "mean"=m))
}
##check
Repeat_experiment(58)$proportion
##check
Repeat_experiment(58)
Repeat_experiment <- function(n,reps=1000){
no_neighbours <- c(1:reps)*0
for (i in 1:reps){
no_neighbours[i] <- count_neighbours(n)
}
prop <- sum(no_neighbours==0)/1000
m <- mean(no_neighbours)
return(list("vector"=no_neighbours, "proportion" = prop, "mean"=m))
}
##check
Repeat_experiment(58)
##check
Repeat_experiment(58)$proportion
Repeat_experiment <- function(n,reps=1000){
no_neighbours <- c(1:reps)*0
for (i in 1:reps){
no_neighbours[i] <- count_neighbours(n)
}
prop <- sum(no_neighbours>0)/1000
m <- mean(no_neighbours)
return(list("vector"=no_neighbours, "proportion" = prop, "mean"=m))
}
##check
Repeat_experiment(58)$proportion
1-(1-2/57)^57
1-exp(-2)
1-exp(-4)
```{r}
print("n is 50"):
Repeat_experiment(50)$proportion
print("n is 50:")
Repeat_experiment(50)$proportion
print("n is 100:")
Repeat_experiment(100)$proportion
print("n is 500:")
Repeat_experiment(500)$proportion
print("n is 1000:")
Repeat_experiment(1000)$proportion
print("n is 50:")
Repeat_experiment(50)$proportion
print("n is 100:")
Repeat_experiment(100)$proportion
print("n is 500:")
Repeat_experiment(500)$proportion
print("n is 1000:")
Repeat_experiment(1000)$proportion
print("n is 50:")
Repeat_experiment(50)$proportion
print("n is 100:")
Repeat_experiment(100)$proportion
print("n is 500:")
Repeat_experiment(500)$proportion
print("n is 1000:")
Repeat_experiment(1000)$proportion
print("n is 10,000:")
Repeat_experiment(10000)$proportion
